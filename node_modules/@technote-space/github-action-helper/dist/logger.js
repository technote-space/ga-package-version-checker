"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const os_1 = require("os");
const sprintf_js_1 = require("sprintf-js");
/**
 * Logger
 */
class Logger {
    /**
     * @param {function|undefined} replacer replacer
     */
    constructor(replacer) {
        /**
         * @param {string} message message
         * @return {string[]} message
         */
        this.splitMessage = (message) => message.replace(/\r?\n$/, '').split(/\r?\n/);
        /**
         * @param {string} message message
         * @param {any[]} args args
         */
        this.log = (message, ...args) => {
            process.stdout.write(sprintf_js_1.sprintf(this.replacer(message), ...args.map(arg => 'string' === typeof arg ? this.replacer(arg) : arg)) + os_1.EOL);
        };
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.multiLineOutput = (replacer, message, ...args) => {
            if ('string' !== typeof message) {
                message.forEach(message => {
                    this.multiLineOutput(replacer, message, ...args);
                });
                return;
            }
            this.splitMessage(message).forEach(message => this.log(replacer(message), ...args));
        };
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.info = (message, ...args) => this.multiLineOutput(message => `> ${message}`, message, ...args);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.debug = (message, ...args) => this.multiLineOutput(message => `##[debug]${message}`, message, ...args);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.error = (message, ...args) => this.multiLineOutput(message => `##[error]${message}`, message, ...args);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.warn = (message, ...args) => this.multiLineOutput(message => `##[warning]${message}`, message, ...args);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.displayCommand = (message, ...args) => this.multiLineOutput(message => `[command]${message}`, message, ...args);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.displayStdout = (message) => this.multiLineOutput(message => `  >> ${message}`, message);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.displayStderr = (message) => this.multiLineOutput(message => `##[warning]  >> ${message}`, message);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.startProcess = (message, ...args) => {
            this.endProcess();
            this.log(`##[group]${message}`, ...args);
            Logger.isRequiredEndGroup = true;
        };
        this.endProcess = () => {
            if (Logger.isRequiredEndGroup) {
                this.log('##[endgroup]');
                Logger.isRequiredEndGroup = false;
            }
        };
        this.replacer = replacer ? replacer : (text) => text;
    }
}
exports.default = Logger;
Logger.isRequiredEndGroup = false;
Logger.resetForTesting = () => {
    Logger.isRequiredEndGroup = false;
};
//# sourceMappingURL=logger.js.map