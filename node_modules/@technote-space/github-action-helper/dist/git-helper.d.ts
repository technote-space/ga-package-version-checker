import { Context } from '@actions/github/lib/context';
import { Logger } from './index';
/**
 * Git Helper
 */
export default class GitHelper {
    private readonly logger;
    private readonly command;
    private readonly cloneDepth;
    private readonly filter;
    /**
     * @param {Logger} logger logger
     * @param {object} options options
     * @param {number|undefined} options.depth depth
     * @param {function|undefined} options.filter filter
     */
    constructor(logger: Logger, options?: {
        depth?: number;
        filter?: (string: string) => boolean;
    });
    /**
     * @param {string} workDir work dir
     * @return {boolean} is cloned?
     */
    private isCloned;
    /**
     * @param {string} workDir work dir
     * @return {Promise<string>} branch name
     */
    getCurrentBranchName: (workDir: string) => Promise<string>;
    /**
     * @param {string} workDir work dir
     * @param {string} branch branch
     * @param {Context} context context
     * @return {Promise<void>} void
     */
    cloneBranch: (workDir: string, branch: string, context: Context) => Promise<void>;
    /**
     * @param {string} workDir work dir
     * @param {Context} context context
     * @return {Promise<void>} void
     */
    private clonePR;
    /**
     * @param {string} workDir work dir
     * @param {Context} context context
     * @return {Promise<void>} void
     */
    clone: (workDir: string, context: Context) => Promise<void>;
    /**
     * @param {string} workDir work dir
     * @param {Context} context context
     * @return {Promise<void>} void
     */
    checkout: (workDir: string, context: Context) => Promise<void>;
    /**
     * @param {string} workDir work dir
     * @param {string} branch branch
     * @return {Promise<void>} void
     */
    gitInit: (workDir: string, branch: string) => Promise<void>;
    /**
     * @param {string} workDir work dir
     * @param {string} name name
     * @param {string} email email
     * @return {Promise<void>} void
     */
    config: (workDir: string, name: string, email: string) => Promise<void>;
    /**
     * @param {string} workDir work dir
     * @param {string[]} commands commands
     * @return {Promise<void>} void
     */
    runCommand: (workDir: string, commands: string[]) => Promise<void>;
    /**
     * @param {string} workDir work dir
     * @return {Promise<string[]>} diff
     */
    getDiff: (workDir: string) => Promise<string[]>;
    /**
     * @param {string} workDir work dir
     * @return {Promise<boolean>} result
     */
    checkDiff: (workDir: string) => Promise<boolean>;
    /**
     * @param {string} workDir work dir
     * @param {string} message message
     */
    commit: (workDir: string, message: string) => Promise<boolean>;
    /**
     * @param {string} workDir work dir
     * @param {Context} context context
     * @return {Promise<void>} void
     */
    fetchTags: (workDir: string, context: Context) => Promise<void>;
    /**
     * @param {string} workDir work dir
     * @param {string|string[]} tags tags
     * @param {Context} context context
     * @return {Promise<void>} void
     */
    deleteTag: (workDir: string, tags: string | string[], context: Context) => Promise<void>;
    /**
     * @param {string} workDir work dir
     * @param {string} newTag new tag
     * @param {string} fromTag from tag
     * @param {Context} context context
     * @return {Promise<void>} void
     */
    copyTag: (workDir: string, newTag: string, fromTag: string, context: Context) => Promise<void>;
    /**
     * @param {string} workDir work dir
     * @param {string|string[]} tags tags
     * @return {Promise<void>} void
     */
    addLocalTag: (workDir: string, tags: string | string[]) => Promise<void>;
    /**
     * @param {string} workDir work dir
     * @param {string} branch branch
     * @param {Context} context context
     * @return {Promise<void>} void
     */
    push: (workDir: string, branch: string, context: Context) => Promise<void>;
}
