import { GitHub } from '@actions/github/lib/github';
import { Context } from '@actions/github/lib/context';
import { Response, GitCreateTreeResponse, GitCreateCommitResponse } from '@octokit/rest';
import { Logger } from './index';
/**
 * API Helper
 */
export default class ApiHelper {
    private readonly logger;
    private readonly branch?;
    private readonly sender?;
    private readonly refForUpdate?;
    private readonly suppressBPError?;
    /**
     * @param {Logger} logger logger
     * @param {object} options options
     * @param {string|undefined} options.branch branch
     * @param {string|undefined} options.sender sender
     * @param {string|undefined} options.refForUpdate ref for update
     * @param {boolean|undefined} options.suppressBPError suppress branch protection error?
     */
    constructor(logger: Logger, options?: {
        branch?: string;
        sender?: string;
        refForUpdate?: string;
        suppressBPError?: boolean;
    });
    /**
     * @param {Context} context context
     * @return {string} branch
     */
    private getBranch;
    /**
     * @param {Context} context context
     * @return {string|boolean} sender
     */
    private getSender;
    /**
     * @param {Context} context context
     * @return {string} ref for update
     */
    private getRefForUpdate;
    /**
     * @param {string} rootDir root dir
     * @param {string} filepath filepath
     * @param {GitHub} octokit octokit
     * @param {Context} context context
     * @return {Promise<{ path: string, sha: string }>} blob
     */
    private createBlob;
    /**
     * @param {GitHub} octokit octokit
     * @param {Context} context context
     * @return {Promise<Response<GitGetCommitResponse>>} commit
     */
    private getCommit;
    /**
     * @param {string} rootDir root dir
     * @param {object} files files
     * @param {GitHub} octokit octokit
     * @param {Context} context context
     * @return {Promise<{ path: string, sha: string }[]>} blobs
     */
    filesToBlobs: (rootDir: string, files: object, octokit: GitHub, context: Context) => Promise<{
        path: string;
        sha: string;
    }[]>;
    /**
     * @param {{ path: string, sha: string }[]} blobs blobs
     * @param {GitHub} octokit octokit
     * @param {Context} context context
     * @return {Promise<Response<GitCreateTreeResponse>>} tree
     */
    createTree: (blobs: {
        path: string;
        sha: string;
    }[], octokit: GitHub, context: Context) => Promise<Response<GitCreateTreeResponse>>;
    /**
     * @param {string} commitMessage commit message
     * @param {Response<GitCreateTreeResponse>} tree tree
     * @param {GitHub} octokit octokit
     * @param {Context} context context
     * @return {Promise<Response<GitCreateCommitResponse>>} commit
     */
    createCommit: (commitMessage: string, tree: Response<GitCreateTreeResponse>, octokit: GitHub, context: Context) => Promise<Response<GitCreateCommitResponse>>;
    /**
     * @param {Response<GitCreateCommitResponse>} commit commit
     * @param {GitHub} octokit octokit
     * @param {Context} context context
     * @return {Promise<void>} void
     */
    updateRef: (commit: Response<GitCreateCommitResponse>, octokit: GitHub, context: Context) => Promise<void>;
    /**
     * @param {Error} error error
     * @return {boolean} result
     */
    private isProtectedBranchError;
    /**
     * @param {string} rootDir root dir
     * @param {string} commitMessage commit message
     * @param {string[]} files files
     * @param {GitHub} octokit octokit
     * @param {Context} context context
     * @return {Promise<boolean>} result
     */
    commit: (rootDir: string, commitMessage: string, files: string[], octokit: GitHub, context: Context) => Promise<boolean>;
    /**
     * @param {GitHub} octokit octokit
     * @param {Context} context context
     * @return {Promise<{ login: string, email: string, name: string, id: number }>} user
     */
    getUser: (octokit: GitHub, context: Context) => Promise<{
        login: string;
        email: string;
        name: string;
        id: number;
    }>;
}
