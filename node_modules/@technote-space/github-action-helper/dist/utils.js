"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const core_1 = require("@actions/core");
exports.getBuildVersion = (filepath) => {
    if (!fs_1.default.existsSync(filepath)) {
        return false;
    }
    const json = JSON.parse(fs_1.default.readFileSync(filepath, 'utf8'));
    if (json && 'tagName' in json) {
        return json['tagName'];
    }
    return false;
};
exports.isRelease = (context) => 'release' === context.eventName;
exports.getTagName = (context) => exports.isRelease(context) ? context.payload.release.tag_name : (/^refs\/tags\//.test(context.ref) ? context.ref.replace(/^refs\/tags\//, '') : '');
exports.isSemanticVersioningTagName = (tagName) => /^v?\d+(\.\d+)*$/i.test(tagName);
exports.getBranch = (context) => context.ref.replace(/^refs\/heads\//, '');
exports.getRefForUpdate = (context) => encodeURIComponent(context.ref.replace(/^refs\//, ''));
exports.getSender = (context) => context.payload.sender && context.payload.sender.type === 'User' ? context.payload.sender.login : false;
exports.getRepository = (context) => `${context.repo.owner}/${context.repo.repo}`;
const getAccessToken = (required) => core_1.getInput('GITHUB_TOKEN', { required });
exports.getActor = () => process.env.GITHUB_ACTOR || '';
exports.getGitUrl = (context, accessTokenRequired = true) => {
    const token = getAccessToken(accessTokenRequired);
    if (token) {
        return `https://${exports.getActor()}:${token}@github.com/${context.repo.owner}/${context.repo.repo}.git`;
    }
    else {
        return `https://github.com/${context.repo.owner}/${context.repo.repo}.git`;
    }
};
exports.escapeRegExp = (text) => text.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
exports.getBoolValue = (input) => !['false', '0', ''].includes(input.trim().toLowerCase());
exports.uniqueArray = (array) => [...new Set(array)];
exports.getWorkspace = () => process.env.GITHUB_WORKSPACE || '';
exports.showActionInfo = (rootDir, logger, context) => {
    const version = exports.getBuildVersion(path_1.default.resolve(rootDir, 'build.json'));
    const tagName = exports.getTagName(context);
    if ('string' === typeof version) {
        logger.info('Version: %s', version);
    }
    logger.info('Event: %s', context.eventName);
    logger.info('Action: %s', context.payload.action);
    logger.info('sha: %s', context.sha);
    logger.info('ref: %s', context.ref);
    if (tagName) {
        logger.info('Tag name: %s', tagName);
    }
};
//# sourceMappingURL=utils.js.map